(function organizeGithubSidebar() { 'use strict'; for (let h2 of document.querySelectorAll('h2.github-sidecar-bookmarklet')) { h2.remove(); } const ulQuerySelector = 'aside div.js-repos-container div.js-repos-container ul'; const lisObject = { }; const ulsObject = { }; for (let li of document.querySelectorAll(ulQuerySelector + ' li')) { const liKey = li.dataset.liKey || li.innerText.trim(); const parts = liKey.split('/'); if (parts.length == 2) { const ulKey = parts[0]; ulsObject[ulKey] = null; lisObject[liKey] = li; const a = li.querySelector('li div div a'); const span = document. createElement('span'); span.style.display = 'none'; span.innerText = parts[0]; while (a.firstChild) { a.removeChild(a.firstChild); } a.append(span, `/${parts[1]}`); li.dataset.liKey = liKey; } } const ulKeys = Object.keys(ulsObject).sort(); const uls0 = document.querySelector(ulQuerySelector); for (let i = document.querySelectorAll(ulQuerySelector).length; i < ulKeys.length; i += 1) { uls0.before(uls0.cloneNode()); } const uls = document.querySelectorAll(ulQuerySelector); for (let i = 0; i < ulKeys.length; i += 1) { ulsObject[ ulKeys[i] ] = uls[i]; } for (let liKey of Object.keys(lisObject).sort()) { const parts = liKey.split('/'); if (parts.length == 2) { const ulKey = parts[0]; const li = lisObject[liKey]; const ul = ulsObject[ulKey]; ul.append(li); } } const h2_template = document.querySelector('h2').cloneNode(); h2_template.classList.add('github-sidecar-bookmarklet'); h2_template.style.marginTop = '20px'; for (let i = 0; i < uls.length; i += 1) { const ul = uls[i]; const lis = ul.querySelectorAll('li'); if (lis && lis.length > 0) { const ulKey = ulKeys[i]; const h2 = h2_template.cloneNode(); h2.innerText = ulKey; ul.before(h2); } else { const pES = ul.previousElementSibling; if (pES && pES.tagName.toUpperCase() == 'H2') { pES.remove(); } ul.remove(); } } })();